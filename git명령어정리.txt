9/3============================================
1. git으로 관리할 경로까지 이동
2. 초기화(.git 폴더 생성-숨겨져 있음)
    git init (git 장소 생성)
      ls -al (숨긴파일 확인)

3. 브랜치 이름 기본값 변경하기(master일때)
      git config --global init.defaultBranch main
      git branch -M main (현재 브랜치명 수정)


4. git 상태확인
git status

5. git으로 관리하는 파일로 추가
git add . (.: 현재경로 전체)
  -> git status (Changes to be committed 바뀜)

6. commit(해당 시점을 저장)
git commit -m "커밋 메시지" (왜 커밋하는지 알수있게)

7. commit 이전에 계정정보 등록
(--global 옵션은 해당 컴퓨터 전체에 적용)
git config --global user.email "you@example.com"
git config --global user.name "Your Name"  
git config user.name Kwonyoonwoo
git config user.email dbsdn0330@gmail.com

8. commit 정보 확인
git log
안돼면 git commit -m "first commit"

코드 -> add -> commit
9. 과제
project_5/test1를 생성
git으로 관리
파일 생성은 알아서... 최소 커밋의 수는 5번이상 되도록

--------------------------------------------------------------------------

로컬 컴퓨터(코드있음)와 github 사이트(비어있음) 연결
1. remote 정보 확인
  git remote
  git remote -v

2. remote 추가
git remote add 리모트이름 github라파지토리주소
git remote add origin https://github.com/Kwonyoonwoo/project5_work1.git

3. remote 삭제
git remote rm 리모트이름
git remote rm origin

4. github 데이터 넣기
git push -u origin main
git push

9/4==========================================
5. clone
- 코드가 없는 상태에서 전체 코드를 다운로드 받을 경우

# 현재 위치에 라파지토리 이름의 폴더를 만드록 파일을 가져온다
git clone <git-remote-url>

# 디렉토리 위치에 파일을 가져온다.
git clone <git-remote-url> <디렉토리>
git clone <git-remote-url> .

6. pull
-코드가 있는 상태에서 변경된 부분만 받을 경우
git pull
---------------------------------------------
1. 브랜치 작성
- 브랜치 목록 확인
git branch

- 브랜치 생성
git branch test01

- 브랜치 이동
git switch test01

- 브랜치에서 소스 코딩, add, commit 작업 진행

2. 브랜치 병합
- main에서(main으로 코드 합류)
git merge 브랜치명
git add .
git commit -m "메시지"

브랜치 삭제
git branch -d 브랜치명

브랜치 복구 
git branch 브랜치명 커밋번호

git log --graph --all --oneline



파일 제외 시키기
app.ini같은 파일에 개인정보가 있음
.gitignore: 숨겨진 파일

#경로는 상관없이 특정파일 제외하기
filename.txt

#현재 경로에 있는 파일만 제거
/filename.txt

#특정 폴더에 있는 파일 제외
폴더명/

#특정 경로의 특정 파일 제외
폴더명/filename.txt

#특정 경로 아래 특정 파일 제외
폴더명/**/filename.txt

#특정 확장자를 가진 파일 제거
*.png

제외시켜도 있으면 캐쉬삭제하고진행
 git rm -r --cached .